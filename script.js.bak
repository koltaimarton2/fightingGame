import { Attack  } from "./attacks.js"
import { Melee } from "./attacks.js"
import { Ranged } from "./attacks.js"



export const canvas = document.querySelector("canvas")
export const ctx = canvas.getContext('2d')

const gravity = 0.7

let time = Number(document.getElementById("time").innerText)


class Character {
    constructor(index, position, speed, color, offset) {
        this.index = index
        this.position = position
        this.speed = speed
        this.height = 175
        this.width = 75
        this.canJump
        this.facingDirection = 1;
        this.isCrouching = false
        this.lastKey 
        this.health = 100
        this.color = color
        this.attackBox = {
            position: {
                x: this.position.x,
                y: this.position.y
            },
            offset ,
            width: 32,//75 ,
            height: 50,
        }
        this.isAttacking
        this.attackLanded = false
        this.attacks = [];
        this.img = new Image();
        this.img.src = "Images/character" + index + ".png";

        this.idleAnim = [];
        for(var i=0;i<4;i++) this.idleAnim.push([1 + 65 * i + 1, 523, 62, 95]);
        this.idleLoopIndex = 0;
        
        this.walkAnim = [];
        for(var i=0;i<5;i++) this.walkAnim.push([1 + 81 * i + 1, 895, 78, 95]);
        this.walkLoopIndex = 0;

        this.cwalkAnim = [];
        for(var i=0;i<3;i++) this.cwalkAnim.push([1 + 65 * i + 1, 830, 62, 63]);
        this.cwalkLoopIndex = 0;
        
        this.crouchAnim = [];
        for(var i=0;i<3;i++) this.crouchAnim.push([1 + 81 * i + 1, 733, 78, 95]);
        this.crouchLoopIndex = 0;        

        this.jumpAnim = [];
        for(var i=0;i<5;i++) this.jumpAnim.push([1 + 65 * i + 1, 1202, 62, 111]);
        this.jumpLoopIndex = 0;

        this.attack0Anim = [];
        for(var i=0;i<2;i++) this.attack0Anim.push([1 + 113 * i + 1, 1412, 110, 95]);
        this.attack0LoopIndex = 0;

        this.attack1Anim = [];
        for(var i=0;i<4;i++) this.attack1Anim.push([1 + 129 * i + 1, 3676, 126, 95]);
        this.attack1LoopIndex = 0;

        this.attack2Anim = [];
        for(var i=0;i<5;i++) this.attack2Anim.push([1 + 129 * i + 1, 2479, 126, 95]);
        this.attack2LoopIndex = 0;

        this.attackAnims = [this.attack0Anim, this.attack1Anim, this.attack2Anim];
        this.attackIndex = 0;
        this.attackLoopIndexes = [0, 0, 0];
        
        this.frameCount = 0;
        this.isMoving = false;
        this.isJumping = false;
    }

    draw() {
        ctx.fillStyle = this.color
        this.frameCount++;
        ctx.save();
        ctx.translate(this.position.x + (this.facingDirection == 1 ? this.width : 0), this.position.y);
        //if(this.index == 1) ctx.scale(-1, 1);
        if(this.facingDirection == 1) ctx.scale(-1, 1);
        try {
            if(this.isCrouching && this.canJump) {
                this.attack0LoopIndex = 0;
                this.attack1LoopIndex = 0;
                this.idleLoopIndex = 0;
                this.height = 130; 
                this.position.y = 257.2 + 45
                this.walkLoopIndex = 0;
                //if(!this.isMoving) 
                ctx.drawImage(this.img, this.crouchAnim[this.crouchLoopIndex][0], this.crouchAnim[this.crouchLoopIndex][1], this.crouchAnim[this.crouchLoopIndex][2], this.crouchAnim[this.crouchLoopIndex][3], 0, 0, this.crouchAnim[this.crouchLoopIndex][2], this.height)
                if(this.frameCount % 10 == 0) {
                    this.crouchLoopIndex++;
                    if (this.crouchLoopIndex >= this.crouchAnim.length) 
                        this.crouchLoopIndex = this.crouchAnim.length - 1;                
                }

                /*if(this.isMoving) {
                    ctx.drawImage(this.img, this.cwalkAnim[this.cwalkLoopIndex][0], this.cwalkAnim[this.cwalkLoopIndex][1], this.cwalkAnim[this.cwalkLoopIndex][2], this.cwalkAnim[this.cwalkLoopIndex][3], 0, this.height - this.cwalkAnim[this.cwalkLoopIndex][3], this.cwalkAnim[this.cwalkLoopIndex][2], this.height)
                    if(this.frameCount % 10 == 0) {
                        this.cwalkLoopIndex++;
                        if (this.cwalkLoopIndex >= this.cwalkAnim.length) 
                            this.cwalkLoopIndex = 0;
                    }
                }*/            

            }
            else
            if(this.isAttacking) { 
                this.idleLoopIndex = 0;
                this.walkLoopIndex = 0;
                this.jumpLoopIndex = 0;
                this.crouchLoopIndex = 0;
                var deltaX = -40;
                var attackAnim = this.attackAnims[this.attackIndex];
                var attackLoopIndex = this.attackLoopIndexes[this.attackIndex];
                ctx.drawImage(this.img, attackAnim[attackLoopIndex][0], attackAnim[attackLoopIndex][1], attackAnim[attackLoopIndex][2], attackAnim[attackLoopIndex][3], deltaX, 0, attackAnim[attackLoopIndex][2], this.height)
                if(this.frameCount % 10 == 0) {
                    attackLoopIndex++;
                    if (attackLoopIndex >= attackAnim.length) {
                        this.isAttacking = false;
                        attackLoopIndex = 0;
                    }
                    this.attackLoopIndexes[this.attackIndex] = attackLoopIndex;
                }        
            }
            else
            if(this.isJumping) {
                this.attack0LoopIndex = 0;
                this.attack1LoopIndex = 0;
                this.idleLoopIndex = 0;
                this.walkLoopIndex = 0;
                this.crouchLoopIndex = 0;
                ctx.drawImage(this.img, this.jumpAnim[this.jumpLoopIndex][0], this.jumpAnim[this.jumpLoopIndex][1], this.jumpAnim[this.jumpLoopIndex][2], this.jumpAnim[this.jumpLoopIndex][3], 0, 0, this.jumpAnim[this.jumpLoopIndex][2], this.height)
                if(this.frameCount % 10 == 0) {
                    this.jumpLoopIndex++;
                    if (this.jumpLoopIndex >= this.jumpAnim.length) 
                        this.jumpLoopIndex = 0;
                }
            }
            else
            if(this.isMoving) {
                this.attack0LoopIndex = 0;
                this.attack1LoopIndex = 0;
                this.idleLoopIndex = 0;
                this.jumpLoopIndex = 0;
                this.crouchLoopIndex = 0;
                ctx.drawImage(this.img, this.walkAnim[this.walkLoopIndex][0], this.walkAnim[this.walkLoopIndex][1], this.walkAnim[this.walkLoopIndex][2], this.walkAnim[this.walkLoopIndex][3], 0, 0, this.walkAnim[this.walkLoopIndex][2], this.height)
                if(this.frameCount % 10 == 0) {
                    this.walkLoopIndex++;
                    if (this.walkLoopIndex >= this.walkAnim.length) 
                        this.walkLoopIndex = 0;
                }
            }
            else {
                this.walkLoopIndex = 0;
                this.jumpLoopIndex = 0;
                this.attack0LoopIndex = 0;
                this.attack1LoopIndex = 0;
                this.crouchLoopIndex = 0;
                ctx.drawImage(this.img, this.idleAnim[this.idleLoopIndex][0], this.idleAnim[this.idleLoopIndex][1], this.idleAnim[this.idleLoopIndex][2], this.idleAnim[this.idleLoopIndex][3], 0, 0, this.idleAnim[this.idleLoopIndex][2], this.height)
                if(this.frameCount % 10 == 0) {
                    this.idleLoopIndex++;
                    if (this.idleLoopIndex >= this.idleAnim.length) 
                        this.idleLoopIndex = 0;
                }
            }
        } catch (error) {
            //console.log(error)
        }
        ctx.restore();
        
        //if(this.index == 2) 
        if (this.isAttacking) {
            ctx.fillStyle = "green"
            ctx.fillRect(this.attackBox.position.x, this.attackBox.position.y, this.attackBox.width, this.attackBox.height)    
        }


    }
    update() {
        this.draw()

        updateOffset(player,player2)

        this.attackBox.position.x = this.position.x + (this.attackBox.offset.x * this.facingDirection)
        this.attackBox.position.y = this.position.y + this.attackBox.offset.y

        this.position.x += this.speed.x
        this.position.y += this.speed.y

        if (this.isCrouching && this.canJump) {
            //this.height = 100; 
            //this.position.y = 257.2 + 75
        } 

        if (this.position.y + this.height + this.speed.y >= canvas.height - 130) {
            this.speed.y = 0
            this.canJump = true;
            this.isJumping = false;
        }
        else {
            this.speed.y += gravity
        }
        this.attacks.forEach(attack => {
            if (attack instanceof Melee) {
                switch (this.index) {
                    case 1:
                        attack.update(player2,16)
                        break
                    case 2:
                        attack.update(player,16)
                        break
                }
            }
            else if (attack instanceof Ranged) {
                switch (this.index) {
                    case 1:
                        attack.update(player2,16)
                        break
                    case 2:
                        attack.update(player,16)
                        break
                }
            }
        })

        if (this.health <= 0) {
            console.log("Dead.")
        }

        ;
    }

    attack(index) {
        if (this.attacks[index]) {
            this.attackIndex = index;
            this.isAttacking = true;
            this.attackLanded = false;
            this.attacks[index].start()
        }
    }
}



const keys = {
    a:{
        pressed : false
    },
    d: {
        pressed: false
    },
    ArrowLeft: {
        pressed: false
    },
    ArrowRight: {
        pressed: false
    },
    e: {
        pressed: false
    }


}



export const player = new Character(
    1,
    { x: 100, y: 0},
    { x: 0, y: 0 },
    'red',
    { x: 37.5, y: 0}
);



export const player2 = new Character(
    2,
    { x: 800, y: 0},
    {x: 0, y: 0},
    'blue',
    { x: 37.5, y: 0}
)

player2.attacks = [
    new Melee(player2,800),
    new Ranged(player2, 600, 10, 10),
    new Melee(player2, 600)
];

let lastKey;
let lastKey2;

export function detectCollision(rectangle1, rectangle2) {
    return (rectangle1.attackBox.position.x + rectangle1.attackBox.width >= rectangle2.position.x &&
        rectangle1.attackBox.position.x <= rectangle2.position.x + rectangle2.width && 
        rectangle1.attackBox.position.y + rectangle1.attackBox.height >= rectangle2.position.y &&
        rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height);
}


function updateOffset(rectangle1, rectangle2) {
    if (rectangle1.position.x < rectangle2.position.x) {
        rectangle1.facingDirection = 1  
        rectangle2.facingDirection = -1 
    } else {
        rectangle1.facingDirection = -1 
        rectangle2.facingDirection = 1  
    }
}


function animate() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    player.update();
    player2.update();

    player.speed.x = 0;
    player2.speed.x = 0;
    
    if (keys.a.pressed && lastKey === 'a') {
        if (player.position.x != 30 && player.position.x != 25 ) {
            if (player.isCrouching) {
                player.speed.x = -5
            }
            else {
                player.speed.x = -10
            }
        }
    }
    else if (keys.d.pressed && lastKey === 'd') {
        if (player.position.x != canvas.width  - player.width -25 && player.position.x != canvas.width  - player.width -20 ) {
            if (player.isCrouching) {
                player.speed.x = 5
            }
            else {
                player.speed.x = 10
            }
        }
    }


    


    if (keys.ArrowLeft.pressed && lastKey2 === 'ArrowLeft') {
        if (player2.position.x != 30 && player2.position.x != 25 ) {
            if (player2.isCrouching) {
                player2.speed.x = -5
            }
            else {
                player2.speed.x = -10
            }
        }
    }
    else if (keys.ArrowRight.pressed && lastKey2 === 'ArrowRight') {
        if (player2.position.x != canvas.width  - player2.width -25 && player2.position.x != canvas.width  - player2.width -20 ) {
            if (player2.isCrouching) {
                player2.speed.x = 5
            }
            else {
                player2.speed.x = 10
            }
        }
    }


    if (detectCollision(player,player2) && player.isAttacking && !player.attackLanded)
    {
        player.isAttacking = false
        player.attackLanded = true

        player2.health -= 5
        let healthBarB = document.getElementById("healthBarB")
        let currentWidthB = parseInt(healthBarB.style.width, 10) || 0
        healthBarB.style.width = (currentWidthB - 22.5) + "px"
        
    }
    if (detectCollision(player2,player) &&player2.isAttacking && !player2.attackLanded)
    {
        player2.isAttacking = false
        player2.attackLanded = true

        player.health -= 5
        let healthBarA = document.getElementById("healthBarA")
        let currentWidthA = parseInt(healthBarA.style.width, 10) || 0
        healthBarA.style.width = (currentWidthA - 22.5) + "px"


    }
    
    requestAnimationFrame(animate);
}



function moveCharacter(e) {
    switch (e.key) {
        case 'a':
            keys.a.pressed = true;
            lastKey = 'a'
            player.isMoving = true;
            break;
        case 'd':
            keys.d.pressed = true;
            lastKey = 'd'
            player.isMoving = true;
            break;
        case 'w':
            if (player.canJump) {
                player.speed.y = -15
                player.canJump = false
                player.isJumping = true
            }
            break
        case 's':
            player.isCrouching = true
            
            break
        case 'e':
            player.attack(0)
            break
        case 'r':
            player.attack(1)
            break
        case 'f':
            player.attack(2)
            break
        case 'ArrowLeft':
            keys.ArrowLeft.pressed = true;
            lastKey2 = 'ArrowLeft'
            player2.isMoving = true;
            break;
        case 'ArrowRight':
            keys.ArrowRight.pressed = true;
            lastKey2 = 'ArrowRight'
            player2.isMoving = true;
            break;
        case 'ArrowUp':
            if (player2.canJump) {
                player2.speed.y = -15
                player2.canJump = false
                player2.isJumping = true
            }
            break
        case 'ArrowDown':
            player2.isCrouching = true;
            break
        case ' ':
            player2.attack(0)
            break
        case 'k':
            player2.attack(1)
            break
        case 'l':
            player2.attack(2)
            break
        

    }
}

function stopCharacter(e) {
    switch (e.key) {
        case 'a':
            keys.a.pressed = false;
            player.isMoving = false;
            break;
        case 'd':
            keys.d.pressed = false;
            player.isMoving = false;
            break;
        case 's':
            player.isCrouching = false
            player.position.y = 257.2 
            player.height = 175;
            break
        case 'ArrowLeft':
            keys.ArrowLeft.pressed = false
            player2.isMoving = false;
            break;
        case 'ArrowRight':
            keys.ArrowRight.pressed = false
            player2.isMoving = false;
            break;
        case 'ArrowDown':
            player2.isCrouching = false
            player2.position.y = 257.2 
            player2.height = 175;
            break
    }
}

function decreaseTimer() {
    setTimeout(decreaseTimer, 1000)
    if (time > 0) {
        time--;
        document.getElementById("time").innerText = time
    
    }

}

decreaseTimer()

function setBackground(event) {
    let image = event.target;
    let imageUrl = `${image.id}.jpg`; 
    console.log(imageUrl)
    document.querySelector("canvas").style.backgroundImage = `url(../Images/${imageUrl})`;
    console.log("Background set.");
    document.getElementById("mainScreen").style.display ="none"
}

function setRedFighter(event) {
    switch (event.target.id) {
        case "heavy":
            player.attacks = [
                new Melee(player, 1200),
                new Ranged(player, 1500, 7, 20),
                new Melee(player, 1800)
            ];
            break
        case "fast":
            player.attacks = [
                new Melee(player, 1200),
                new Ranged(player, 750, 40, 2),
                new Melee(player, 1800)
            ];
            break
        case "mid":
            player.attacks = [
                new Melee(player, 1200),
                new Ranged(player, 1200, 10, 7),
                new Melee(player, 1800)
            ];
            break
             
    }

    document.getElementById("fighterScreenRed").style.display = "none"
}

function setBlueFighter(event) {
    switch (event.target.id) {
        case "heavy":
            player2.attacks = [
                new Melee(player, 1200),
                new Ranged(player, 1500, 7, 20),
                new Melee(player, 1800)
            ];
            break
        case "fast":
            player2.attacks = [
                new Melee(player, 600),
                new Ranged(player, 750, 40, 2),
                new Melee(player, 900)
            ];
            break
        case "mid":
            player2.attacks = [
                new Melee(player, 900),
                new Ranged(player, 1200, 10, 7),
                new Melee(player, 1500)
            ];
            break
             
    }

    document.getElementById("fighterScreenBlue").style.display = "none"
}


document.querySelector("#arena").addEventListener("click", setBackground);
document.querySelector("#temple").addEventListener("click", setBackground);
document.querySelector("#ruins").addEventListener("click", setBackground);
document.querySelector("#altar").addEventListener("click", setBackground);

document.querySelector("#heavy").addEventListener("click", setRedFighter);
document.querySelector("#fast").addEventListener("click", setRedFighter);
document.querySelector("#mid").addEventListener("click", setRedFighter);

document.querySelector("#heavy2").addEventListener("click", setBlueFighter);
document.querySelector("#fast2").addEventListener("click", setBlueFighter);
document.querySelector("#mid2").addEventListener("click", setBlueFighter);


document.addEventListener("keydown", moveCharacter)
document.addEventListener("keyup", stopCharacter)





animate()








